@model dynamic
@{
    ViewBag.Title = "New";
}

<h2>New Rental Form</h2>

<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <!-- customer is id that jquery will look for -->
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <!-- movie is id that jquery will look for -->
            <input id="movie" name="movie" data-rule-atLeastOneMovie="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-2">
            <ul id="movies" class="list-group"> </ul>
        </div>
    </div>

    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // when document is ready - standard initialization for jquery
        $(document).ready(function () {
            // viewModel blank object (viewModel on client side)
            var vm = {
                // empty array with movieIds
                movieIds: []
            };
            // Bloodhound is sugestion engine used by typeahead
            var customers = new Bloodhound({
                // take property Name and transfer it to strings tokens
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            // look for object with customer id
            $('#customer').typeahead(
                // behaviour of typeahead
                {
                    // show sugestions when at least 3 characters provided
                    minLenght: 3,
                    // highlight matching patterns
                    highlight: true
                },
                {
                    name: 'customers',
                    // display name property of customers
                    display: 'name',
                    source: customers
                }
                // act on event called "typeahead:select"
                // and call callcback function
            ).on("typeahead:select", function (e, customer) {
                // write customer id to viewModel
                vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLenght: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {

                // add new listItem to HTML list
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                // set value of movie textbox to empty
                $("#movie").typeahead("val", "");

                // add movie id to viewModel movieIds array
                vm.movieIds.push(movie.id);
            });

            $.validator.addMethod("validCustomer", function () {
                return vm.customerId && vm.customerId !== 0;
            }, "Please select a valid customer.");

            $.validator.addMethod("atLeastOneMovie", function () {
                return vm.movieIds.length > 0;
            }, "Please select at least one movie");

            var validator = $("#newRental").validate({
                submitHandler: function () {
                $.ajax({
                    url: "/api/newRentals",
                    method: "POST",
                    data: vm
                    })
                    .done(function () {
                        toastr.success("Rentals successfully recorded.");

                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = { movieIds: [] };

                        validator.resetForm();
                    })
                    .fail(function () {
                        toastr.error("Somethings unexpected happened.");
                    })
                    return false;
                }
            });
        })
    </script>
}